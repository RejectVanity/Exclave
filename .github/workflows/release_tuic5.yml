name: TUIC v5 Plugin Release Build
on:
  workflow_dispatch:
    inputs:
      publish:
        description: 'Release (y/n)'
        required: false
      tag:
        description: 'Release Tag'
        required: false
jobs:
  native:
    name: Native Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install toolchain
        run: |
          rustup toolchain install 1.73.0
          rustup override set 1.73.0
      - name: Install rust android target
        run: ./run init action rust
      - name: TUIC v5 Cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            plugin/tuic5/src/main/jniLibs
          key: ${{ hashFiles('.github/workflows/*', 'bin/lib/tuic5/*') }}
      - name: Native Build
        run: |
          export ANDROID_NDK_HOME=${ANDROID_NDK_LATEST_HOME}
          ./run plugin tuic5
  build:
    name: Gradle Build
    runs-on: ubuntu-latest
    needs:
      - native
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17
      - name: TUIC v5 Cache
        uses: actions/cache@v4
        with:
          path: |
            plugin/tuic5/src/main/jniLibs
          key: ${{ hashFiles('.github/workflows/*', 'bin/lib/tuic5/*') }}
      - name: Release Build
        env:
          SKIP_BUILD: on
          BUILD_PLUGIN: tuic5
        run: |
          echo "sdk.dir=${ANDROID_HOME}" > local.properties
          export LOCAL_PROPERTIES="${{ secrets.LOCAL_PROPERTIES }}"
          ./run init action library
          ./gradlew :plugin:tuic5:assembleOssRelease
          APK=$(find plugin/tuic5/build/outputs/apk -name '*arm64-v8a*.apk')
          APK=$(dirname "$APK")
          echo "APK=$APK" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v4
        with:
          name: APKs
          path: ${{ env.APK }}
  publish:
    name: Publish Release
    if: github.event.inputs.publish == 'y' && github.event.inputs.tag != ''
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Donwload Artifacts
        uses: actions/download-artifact@v4
        with:
          name: APKs
          path: artifacts
      - name: Release
        run: |
          wget -O ghr.tar.gz https://github.com/tcnksm/ghr/releases/download/v0.16.2/ghr_v0.16.2_linux_amd64.tar.gz
          tar -xvf ghr.tar.gz
          mv ghr*linux_amd64/ghr .
          mkdir apks
          find artifacts -name "*.apk" -exec cp {} apks \;
          ./ghr -replace -prerelease -t "${{ github.token }}" -n "${{ github.event.inputs.tag }}" "${{ github.event.inputs.tag }}" apks
